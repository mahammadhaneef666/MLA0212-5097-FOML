import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import accuracy_score
np.random.seed(0)
hours_studied = np.random.uniform(1, 10, 100)
marks = hours_studied * 10 + np.random.normal(0, 5, 100)
pass_fail = (marks >= 50).astype(int)
X = hours_studied.reshape(-1, 1)
y = marks
y_logistic = pass_fail
linear_model = LinearRegression()
linear_model.fit(X, y)
y_pred_linear = linear_model.predict(X)
poly_features = PolynomialFeatures(degree=2)
X_poly = poly_features.fit_transform(X)
poly_model = LinearRegression()
poly_model.fit(X_poly, y)
y_pred_poly = poly_model.predict(X_poly)
logistic_model = LogisticRegression()
logistic_model.fit(X, y_logistic)
y_pred_logistic_prob = logistic_model.predict_proba(X)[:, 1]
y_pred_logistic = logistic_model.predict(X)
accuracy_logistic = accuracy_score(y_logistic, y_pred_logistic)
plt.figure(figsize=(14, 6))
plt.subplot(1, 3, 1)
plt.scatter(hours_studied, marks, color='blue', label='Data')
plt.plot(hours_studied, y_pred_linear, color='red', label='Linear Regression')
plt.xlabel('Hours Studied')
plt.ylabel('Marks')
plt.title('Linear Regression')
plt.legend()
plt.subplot(1, 3, 2)
plt.scatter(hours_studied, marks, color='blue', label='Data')
plt.plot(hours_studied, y_pred_poly, color='red', label='Polynomial Regression')
plt.xlabel('Hours Studied')
plt.ylabel('Marks')
plt.title('Polynomial Regression')
plt.legend()
plt.subplot(1, 3, 3)
plt.scatter(hours_studied, pass_fail, color='blue', label='Data')
plt.plot(hours_studied, y_pred_logistic_prob, color='red', label='Logistic Regression')
plt.xlabel('Hours Studied')
plt.ylabel('Probability of Passing')
plt.title(f'Logistic Regression\nAccuracy: {accuracy_logistic:.2f}')
plt.legend()
plt.tight_layout()
plt.show()
